// nodeMCU code

#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <SoftwareSerial.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <SPI.h>
   
const char *ssid =  "4G";    
const char *pass =  "111222333";
WiFiClient client;
char server [] = "192.168.0.174";

WidgetLCD lcd(V4);
String data;
String I;
String myString; 																// complete message from arduino, which consistors of sensors data
char rdata;																		// received characters
String pH;
float waterTemp;
float tds;
int DSPIN = D1;

// tds * VCC power value
namespace device 
{
	float aref = 3.3;
}

// tds
namespace sensor 
{
	float ec = 0;
	unsigned int tds = 0;
	float ecCalibration = 1;
}

// tds
namespace pin 
{
	const byte tds_sensor = A0; 
}

void setup()
{
	Serial.begin(9600);
	delay(10);

	Serial.println("Connecting ");
	Serial.println(ssid);
	WiFi.begin(ssid, pass);

	while (WiFi.status() != WL_CONNECTED) {
		delay(500);
		Serial.print(".");
	}
	
	Serial.println("");
	Serial.println("WiFi connected");

	Serial.println("Server started");
	Serial.print(WiFi.localIP());
	Serial.println("");
	
	delay(1000);
	Serial.println("connecting...");
}


void loop()
{

	waterTemp = TempRead();
	waterTemp  = waterTemp*0.0625; 													// conversion accuracy is 0.0625 / LSB
	
	float rawEC = analogRead(pin::tds_sensor) * device::aref / 1024.0;				// read the analog value more stable by the median filtering algorithm, and convert to voltage value
	float temperatureCoefficient = 1.0 + 0.02 * (waterTemp - 25.0);					// temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));	   
	sensor::ec = (rawEC / temperatureCoefficient) * sensor::ecCalibration;			// temperature and calibration compensation  
	float ec = sensor::ec;
	
	sensor::tds = (133.42 * pow(sensor::ec, 3) - 255.86 * sensor::ec * sensor::ec + 857.39 * sensor::ec) * 0.5;		//	convert voltage value to tds value	 
	tds = sensor::tds;

	if (Serial.available() == 0 ) 
		{
			delay(10000);
			pH = I - 1;
			send_to_database(tds,waterTemp,ec,pH);
		}
   
	if (Serial.available() > 0 ) 
		{
			rdata = Serial.read(); 
			myString = myString+ rdata; 
			Serial.print(rdata);
			if( rdata == '\n')
				{
					I = getValue(myString, ',', 0);
					myString = "";
					// Serial.println(I);
					lcd.print(0,0,"pH Value:");
				}
		}
}


String getValue(String data, char separator, int index)
{
    int found = 0;
    int strIndex[] = { 0, -1 };
    int maxIndex = data.length() - 1;

    for (int i = 0; i <= maxIndex && found <= index; i++) {
        if (data.charAt(i) == separator || i == maxIndex) {
            found++;
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i+1 : i;
        }
    }
    return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}

void send_to_database(float tds, float waterTemp, float ec, String pH)   //CONNECTING WITH MYSQL
 {
	if (client.connect(server, 80)) {
		Serial.println("connected to local server");

		Serial.print("GET /IoT/dbcon.php?tds=");
		client.print("GET /IoT/dbcon.php?tds=");     
		Serial.println(tds);
		client.print(tds);
		
		client.print("&waterTemp=");
		Serial.println("&waterTemp=");
		client.print(waterTemp);
		Serial.println(waterTemp);
		
		client.print("&ec=");
		Serial.println("&ec=");
		client.print(ec);
		Serial.println(ec);
		
		client.print("&pH=");
		Serial.println("&pH=");
		Serial.println(pH);
		client.print(pH); 

		client.print(" ");      
		client.print("HTTP/1.1");
		client.println();
		client.println("Host: 192.168.0.174");
		
		client.println("Connection: close");
		client.println();
	} else {
		Serial.println("connection failed");
	}
}

boolean DS18B20_Init()
{
	pinMode(DSPIN, OUTPUT);
	digitalWrite(DSPIN, HIGH);
	delayMicroseconds(5);
	digitalWrite(DSPIN, LOW);
	delayMicroseconds(750);//480-960
	digitalWrite(DSPIN, HIGH);
	pinMode(DSPIN, INPUT);
	int t = 0;
	while(digitalRead(DSPIN))
		{
			t++;
			if(t > 60) return false;
			delayMicroseconds(1);
		}
		
	t = 480 - t;
	pinMode(DSPIN, OUTPUT);
	delayMicroseconds(t);
	digitalWrite(DSPIN, HIGH);
	return true;
}
 
void DS18B20_Write(byte data1)
{
	pinMode(DSPIN, OUTPUT);
	for(int i=0; i<8; i++)
		{
			digitalWrite(DSPIN, LOW);
			delayMicroseconds(10);
			if(data1 & 1) digitalWrite(DSPIN, HIGH);
			else digitalWrite(DSPIN, LOW);
			data1 >>= 1;
			delayMicroseconds(50);
			digitalWrite(DSPIN, HIGH);
		}
}
 
byte DS18B20_Read()
{
	pinMode(DSPIN, OUTPUT);
	digitalWrite(DSPIN, HIGH);
	delayMicroseconds(2);
	byte data1 = 0;
	for(int i=0; i<8; i++)
		{
			digitalWrite(DSPIN, LOW);
			delayMicroseconds(1);
			digitalWrite(DSPIN, HIGH);
			pinMode(DSPIN, INPUT);
			delayMicroseconds(5);
			data1 >>= 1;
			if(digitalRead(DSPIN)) data1 |= 0x80;
			delayMicroseconds(55);
			pinMode(DSPIN, OUTPUT);
			digitalWrite(DSPIN, HIGH);
		}
	return data1;
}
 
int TempRead()
{
	if(!DS18B20_Init()) return 0;
	DS18B20_Write (0xCC); // Send skip ROM command
	DS18B20_Write (0x44); // Send reading start conversion command
	if(!DS18B20_Init()) return 0;
	DS18B20_Write (0xCC); // Send skip ROM command
	DS18B20_Write (0xBE); // Read the register, a total of nine bytes, the first two bytes are the conversion value
	int waterTemp = DS18B20_Read (); // Low byte
	waterTemp |= DS18B20_Read () << 8; // High byte
	return waterTemp;
}